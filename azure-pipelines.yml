trigger:
  branches:
    include:
      - main
  paths:
    include:
      - source/*
  tags:
    include:
      - 'v*'
    exclude:
      - '*-*'

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  sourceFolderName: source
  defaultBranch: main

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'windows-latest'
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool --version 5.*
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)
          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -tasks pack'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    jobs:
      - job: Test_HQRM
        displayName: 'HQRM'
        pool:
          vmImage: 'windows-latest'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: test
            displayName: 'Run HQRM Test'
            inputs:
              filePath: './build.ps1'
              arguments: '-Tasks hqrmtest'
              pwsh: false
          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: 'output/testResults/NUnit*.xml'
              testRunTitle: 'HQRM'

      - job: test_unit_linux
        condition: succeededOrFailed()
        displayName: 'Linux - Unit Tests'
        timeoutInMinutes: '0'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Tests'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Linux - Unit'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverageLinux_$(System.JobAttempt)'

      - job: test_unit_windows_core
        condition: succeededOrFailed()
        displayName: 'Windows (PowerShell Core) - Unit Tests'
        timeoutInMinutes: '0'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Tests'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'
              pwsh: true

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Windows Server Core (PowerShell Core) - Unit'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverageWinPS7_$(System.JobAttempt)'

      # - job: test_integration_windows_core
      #   displayName: 'Windows (PowerShell Core) - Integration Tests'
      #   timeoutInMinutes: 0
      #   variables:
      #     # This sets environment variable $env:CI.
      #     CI: true
      #     # This sets environment variable $env:CONFIGURATION.
      #     configuration: Integration
      #   pool:
      #     vmImage: 'windows-latest'
      #   steps:
      #     - task: DownloadPipelineArtifact@2
      #       displayName: 'Download Build Artifact'
      #       inputs:
      #         buildType: 'current'
      #         artifactName: $(buildArtifactName)
      #         targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'

      #     - task: PowerShell@2
      #       name: configureWinRM
      #       displayName: 'Configure WinRM'
      #       inputs:
      #         targetType: 'inline'
      #         script: 'winrm quickconfig -quiet'
      #         pwsh: false

      #     - powershell: |
      #         ./build.ps1 -Tasks test -CodeCoverageThreshold 0 -PesterScript @(
      #           'tests/Integration/'
      #         )
      #       name: test
      #       displayName: 'Run Integration Tests'
      #       env:
      #         azureDevOpsIntegrationApiUri: $(AzureDevOps.Integration.ApiUri)
      #         azureDevOpsIntegrationPat: $(AzureDevOps.Integration.Pat)

      #     - task: PublishTestResults@2
      #       displayName: 'Publish Test Results'
      #       condition: succeededOrFailed()
      #       inputs:
      #         testResultsFormat: 'NUnit'
      #         testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
      #         testRunTitle: 'Windows Server Core (PowerShell Core) - Integration'

      - job: test_unit_windows_ps
        condition: succeededOrFailed()
        displayName: 'Windows (Windows PowerShell) - Unit Tests'
        timeoutInMinutes: '0'
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Tests'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'
              pwsh: false

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'Windows Server Core (Windows PowerShell) - Unit'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverageWinPS51_$(System.JobAttempt)'

      - job: test_unit_macos
        condition: succeededOrFailed()
        displayName: 'macOS - Unit Tests'
        timeoutInMinutes: '0'
        pool:
          vmImage: 'macos-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Tests'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks test'
              pwsh: true

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: 'MacOS - Unit'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Artifact'
            condition: succeededOrFailed()
            inputs:
              targetPath: '$(buildFolderName)/$(testResultFolderName)/'
              artifactName: 'CodeCoverageMacOS_$(System.JobAttempt)'

      - job: Code_Coverage
        displayName: 'Publish Code Coverage'
        dependsOn:
          - test_unit_macos
          - test_unit_linux
          - test_unit_windows_core
          - test_unit_windows_ps
        pool:
          vmImage: 'ubuntu-latest'
        timeoutInMinutes: '0'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Build Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact macOS'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverageMacOS_$(System.JobAttempt)'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageMacOS'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact Linux'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverageLinux_$(System.JobAttempt)'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageLinux'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact Windows (PS 5.1)'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverageWinPS51_$(System.JobAttempt)'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageWinPS51'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Test Artifact Windows (PS7)'
            inputs:
              buildType: 'current'
              artifactName: 'CodeCoverageWinPS7_$(System.JobAttempt)'
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCoverageWinPS7'

          - task: PowerShell@2
            name: merge
            displayName: 'Merge Code Coverage files'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks merge'
              pwsh: true

          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage to Azure DevOps'
            inputs:
              codeCoverageTool: 'JaCoCo'
              summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'

          - script: |
              bash <(curl -s https://codecov.io/bash) -f "./$(buildFolderName)/$(testResultFolderName)/JaCoCo_coverage.xml"
            displayName: 'Upload to Codecov.io'

  - stage: Deploy
    dependsOn: Test
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        contains(variables['System.TeamFoundationCollectionUri'], 'dsccommunity')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildFolderName)'
          - task: PowerShell@2
            name: publishRelease
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
          - task: PowerShell@2
            name: sendChangelogPR
            displayName: 'Send Changelog PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              ReleaseBranch: $(defaultBranch)
              MainGitBranch: $(defaultBranch)
